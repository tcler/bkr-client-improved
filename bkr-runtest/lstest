#!/bin/bash
#
# Traversal all cases in specified dir and format output the testlist
# bkr-runtest can parse the testlist, and submit them to beaker
#
# Author: jiyin@redhat.com

ymlhash() {
	local k=$1 v=$2
	local pat='[:, ]|\[|\]'
	[[ -z "$k" ]] && return
	v=${v:-?}

	[[ $k =~ $pat ]] && k=\""${k}"\"
	[[ $v =~ $pat ]] && v=\""${v}"\"
	echo -n "${k}: $v, "
}
ymllist() {
	local e=$1
	local pat='[:, ]|\[|\]'
	[[ -z "$e" ]] && return

	[[ $e =~ $pat ]] && e=\""${e}"\"
	echo -n "$e, "
}

get_taskname() {
	local metaf=$1
	if [[ "$metaf" = testinfo.desc ]]; then
		awk -F'[: =\t]+' '/^Name:/{print $2}' $metaf
	elif [[ "$metaf" = metadata ]]; then
		awk -F'[ =]+' '$1 == "name" {print $2}' $metaf
	fi
}

get_max_time() {
	local metaf=$1 _type=
	if [[ "$metaf" = testinfo.desc ]]; then
		_time=$(awk -F'[: =\t]+' '/^TestTime:/{print $2}' $metaf)
	elif [[ "$metaf" = metadata ]]; then
		_time=$(awk -F'[ =]+' '$1 == "max_time" {print $2}' $metaf)
	fi
	[[ $_time =~ [0-9]+h ]] && _time=$(bc<<<"scale=0;${_time/h/}*60/1")m
	[[ $_time =~ [0-9]+d ]] && _time=$(bc<<<"scale=0;${_time/d/}*24*60/1")m
	echo -n ${_time:-30m}
}

get_test_type() {
	local metaf=$1 _type=
	if [[ "$metaf" = testinfo.desc ]]; then
		_type=$(awk '{match($0,"Type:[ \t]*.*(.egression|.tress|.unction|.anity)",M); if(M[1]) print M[1]}' $metaf)
	elif [[ "$metaf" = metadata ]]; then
		_type=$(awk -F'[ =]+' '$1 == "type" {print $2}' $metaf)
	fi
	echo -n ${_type:-Function}
}

get_test_level() {
	local metaf=$1 _level=
	if [[ "$metaf" = testinfo.desc ]]; then
		_level=$(awk '{match($0,"(Type):[ \t]*.*([Tt]ier[0-9]+)",M); if(M[2]) print M[2]}' $metaf)
	elif [[ "$metaf" = metadata ]]; then
		_level=$(awk -F'[ =]+' '$1 == "level" {print $2}' $metaf)
	fi
	echo -n ${_level:-Tier1}
}

get_test_ssched() {
	local metaf=$1 _ssched=
	if [[ "$metaf" = metadata ]]; then
		_ssched=$(awk -F'[ =]+' '$1 == "ssched" {print $2}' $metaf)
	fi
	if [[ -z "$_ssched" ]]; then
		grep -E -q -i ' *DANGEROU?S=yes' -r . && _ssched="yes.dangerous"
		grep -E -q -i ' *STRESS=yes' -r . && _ssched="yes.stress"
	fi
	echo -n ${_ssched:-no}
}

get_test_topo() {
	local metaf=$1 runf=runtest.sh _topo=
	if [[ "$metaf" = testinfo.desc ]]; then
		grep -q "Type:[[:space:]]*Multihost" $metaf &&
			_topo=multiHost.1.1
		##if specify the machine acount in testinfo.desc
		nums=$(grep -i "Type:[[:space:]]*Multihost" $metaf | grep -o '[0-9]\+')
		{ read ServerNeed; read ClientNeed; } <<< "$nums"
		test -n "$ServerNeed" -o -n "$ClientNeed" &&
			_topo=multiHost.${ServerNeed:-1}.${ClientNeed:-1}
	elif [[ "$metaf" = metadata ]]; then
		_topo=$(awk -F'[ =]+' '$1 == "topo" {print $2}' $metaf)
	fi

	grep -q '\${\?CLIENTS}\?' $runf && grep -q '\${\?SERVERS}\?' $runf &&
		_topo=multiHost.1.1
	##if specify the machine acount in runtest.sh
	grep -E -q '^[[:space:]]*(Client|Server)Need=' $runf && {
		eval "$(grep -E '^[[:space:]]*(Client|Server)Need=' $runf)"
		_topo=multiHost.${ServerNeed:-1}.${ClientNeed:-1}
	}

	echo -n ${_topo}
}

get_test_component() {
	local metaf=$1 _component=
	if [[ "$metaf" = testinfo.desc ]]; then
		unset PACKAGE_NAME PACKAGE
		eval "$(grep -E '^[[:space:]]*(export *)?PACKAGE(_NAME)?=[^ #]' -h * .* 2>/dev/null|sed 's;export;;')"
		_component=${PACKAGE_NAME:-${PACAKGE}}
	elif [[ "$metaf" = metadata ]]; then
		_component=$(awk -F'[ =]+' '$1 == "component" {print $2}' $metaf)
	fi
	[[ -z "$_component" ]] &&
		_component=$(get_taskname $metaf|awk -F/ '{if ($2 != "CoreOS") {print $2} else {print $3}}')
	echo -n ${_component}
}

_caseInfo() {
	[ $# -lt 1 ] && {
		echo "Usage: func <case path> [subtest file]" >&2
		return 1
	}

	local metafile=testinfo.desc
	local casepath=$1
	local subtestf=$2
	local taskname=

	declare -A Attr
	local _time= _component= _ssched=no _type= _level=

	declare -a Setup
	local topo=

	[ -d "$casepath" ] || { echo "{warn} dir [$casepath] not exist." >&2; return; }

	pushd $casepath >/dev/null;
	[[ "$DEBUG" = yes ]] && echo $casepath >&2
	subtestf=${subtestf:-subtest.yml}
	if [[ "$CONV" = yes ]]; then
		local newfmt=
		if test -f "$subtestf" && ! yq "$subtestf" &>/dev/null; then
			#[[ $(wc -L <"$subtestf") -gt 188 ]] &&
			#	newfmt=$(sed -r '/^[[:space:]]*(attr|param|setup):/ {s/^/- {/; s/$/}/}' "$subtestf" | yq -P | sed 's/^-/\n&/')
			newfmt=$(while read line; do
				if [[ "${#line}" -eq 0 || "${line}" =~ [\ ]*#.* ]]; then
					echo "${line}"
				elif [[ "${#line}" -lt 144 ]]; then
					echo "${line}"
				elif [[ "${#line}" -lt 216 ]]; then
					yq -P <<<"$line"|yq '.[].* style="flow"';
				else
					yq -P <<<"$line";
				fi
			done < <(sed -r '/^[[:space:]]*(attr|param|setup):/ {s/^/- \{/; s/(}|])( +#.*)?$/\1\}\2/}' "$subtestf")
			)
			[[ -n "$newfmt" ]] && echo "$newfmt" >"$subtestf"
		fi
		return
	fi

	if [[ -f metadata ]]; then
		metafile=metadata
	else
		unlink $metafile 2>/dev/null
		make $metafile &>/dev/null
		[ -f $metafile ] || {
			echo "{ERROR} [$casepath/] make $metafile fail, please fix the Makefile." >&2
			popd >/dev/null; return 1
		}
	fi

	#get task name
	taskname=$(get_taskname $metafile)
	[ -z "$taskname" ] && {
		echo "{ERROR} [$casepath/] taskname NULL, please check your '$metafile' file" >&2
		popd >/dev/null; return 1
	}

	#get test attr: max run time
	_time=$(get_max_time $metafile)
	Attr[time]=$_time

	#get test attr: pkg/component name belong to
	_component=$(get_test_component $metafile)
	Attr[component]=$_component

	#get test attr: sepatate scheduling?
	_ssched=$(get_test_ssched $metafile)
	## if cost so many time separate schedule too
	[[ $maxtime =~ [0-9]+h ]] && maxtime=$((${maxtime/h/}*60))
	[[ $maxtime =~ [0-9]+d ]] && maxtime=$((${maxtime/d/}*24*60)); maxtime=${maxtime//[^0-9]/}
	[ "$_ssched" = "no" -a "${_time/m/}" -gt "${maxtime:-120}" ] && _ssched="yes.longtime"
	Attr[ssched]=$_ssched

	#get test attr: type info
	_type=$(get_test_type $metafile)
	Attr[type]=$_type

	#get test attr: level info
	_level=$(get_test_level $metafile)
	Attr[level]=$_level

	#get test setup: topologic if is multihost
	topo=$(get_test_topo $metafile)
	[[ -n "$topo" ]] && Setup+=(--topo=$topo)

	if [[ $metafile = testinfo.desc ]]; then
		repoHead=$(sed -r 's@^((/CoreOS)?/[^/]+)/.*$@\1@' <<<${taskname})
		if [[ "$META" = yes ]]; then
			makentrace=$(make run -n --trace)
			finalsh=$(echo "$makentrace"|sed -e '/^Makefile:.*/d' \
				-e '/^test -x runtest.sh || chmod +x runtest.sh$/d' \
				-e '/^chmod +x runtest.sh$/d')
			if [[ "$finalsh" = ./runtest.sh || "$finalsh" = "bash runtest.sh" ]]; then
				ep="bash runtest.sh"
			else
				echo -e "#!/bin/bash\n#generated by 'lstest --metaf'" >main.sh
				echo "$makentrace"|sed -r '/^Makefile:.* update target .([a-zA-Z0-9_]+).*$/{s//\n#\1:/}' >>main.sh
				sed -ri '/^\(( set .o posix)/{s//( set +v;\1/}' main.sh
				chmod +x main.sh
				ep="bash -v main.sh"
			fi
			git mv Makefile Makefile.bak
			git rm -f _env

			requires=$(sed -nr '/^.*Requires:\s*([^"]+)$/{s//\1/;s/\s+/\n/g;p}' $metafile |
				sort -u | awk '
				match($0,/^library\(([^\/]+)\/(.+)\)$/,M) { print(M[1] "/Library/" M[2]); next }
				match($0,/^test\(\/?(.+)\)$/,M) { print(M[1]); next }
				match($0,/^kernel-kernel-(.+)$/,M) { print("kernel/" gensub("-","/","g",M[1])); next }
				match($0,/^nfs-utils-nfs-utils-(.+)$/,M) { print("nfs-utils/" gensub("-","?","g",M[1])); next }
				match($0,/^\//) { print(gensub("^/","",1)); next }
				match($0,/^(.+)-CoreOS-(.+)$/,M) { m1=M[1]; m2=M[2]; sub(m1 "-","",m2); print(m1 "/" gensub("-","?","g",m2)); next }
				match($0,/^.+\//) { print; next }
			' | sed -e 's;^;/;' -e '/\?/!'"s@^${repoHead}/@@" | sort -u)
			cat <<-EOF >metadata
			[General]
			name=$taskname
			component=${_component}
			owner=$(sed -nr '/Owner:\s+/{s///;p;q}' $metafile)
			description=$(sed -nr '/Description:\s+/{s///;p;q}' $metafile)
			priority=$_level
			license=$(sed -nr '/License:\s+/{s///;p;q}' $metafile)
			topo=${topo:-singleHost}
			confidential=no
			destructive=no
			$(sed -nr '/Bug:\s+/{s//bug=/;p;q}' $metafile)

			[restraint]
			entry_point=$ep
			softDependencies=$(sed -nr '/^.*Requires:\s*([^"()]+)$/{s//\1/;s/ +/\n/g;p}' $metafile |
				grep -E -v -e '^kernel-kernel-|^(.+)-CoreOS-\1-|/' -e '^$' | sort -u | paste -s -d\; -)
			repoRequires=$(echo "$requires"|grep -v ^/ | paste -s -d\; -)
			orepoRequires=$(echo "$requires"|grep ^/ | paste -s -d\; -)
			max_time=${Attr[time]}
			no_localwatchdog=true
			EOF
			tmtconf=main.fmf
			test -f $tmtconf && sed -i "/^test: make run/s//test: $ep/" $tmtconf || tmtconf=
			git add metadata main.sh $tmtconf 2>/dev/null
			sed -e 's/\$ARCH/\${RSTRNT_OSARCH}/g' -e 's/\${ARCH}/\${RSTRNT_OSARCH}/g' \
				-e 's/\$DISTRO\(_BUILD\)\?/\${RSTRNT_OSDISTRO}/g' -e 's/\${DISTRO\(_BUILD\)\?}/\${RSTRNT_OSDISTRO}/g' \
				-e 's/\$FAMILY/\${RSTRNT_OSMAJOR}/g' -e 's/\${FAMILY}/\${RSTRNT_OSMAJOR}/g' \
				-e 's/\$JOBID/\${RSTRNT_JOBID}/g' -e 's/\${JOBID}/\${RSTRNT_JOBID}/g' \
				-e 's/\$REBOOTCOUNT/\${RSTRNT_REBOOTCOUNT}/g' -e 's/\${REBOOTCOUNT}/\${RSTRNT_REBOOTCOUNT}/g' \
				-e 's/\$RECIPESETID/\${RSTRNT_RECIPESETID}/g' -e 's/\${RECIPESETID}/\${RSTRNT_RECIPESETID}/g' \
				-e 's/\$RECIPEID/\${RSTRNT_RECIPEID}/g' -e 's/\${RECIPEID}/\${RSTRNT_RECIPEID}/g' \
				-e 's/\$RECIPETESTID/\${RSTRNT_RECIPEID}/g' -e 's/\${RECIPETESTID}/\${RSTRNT_RECIPEID}/g' \
				-e 's/\$SUBMITTER/\${RSTRNT_OWNER}/g' -e 's/\${SUBMITTER}/\${RSTRNT_OWNER}/g' \
				-e 's/\$TASKID/\${RSTRNT_TASKID}/g' -e 's/\${TASKID}/\${RSTRNT_TASKID}/g' \
				-e 's/\$TESTID/\${RSTRNT_TASKID}/g' -e 's/\${TESTID}/\${RSTRNT_TASKID}/g' \
				-e 's/\$TESTNAME/\${RSTRNT_TASKNAME}/g' -e 's/\${TESTNAME}/\${RSTRNT_TASKNAME}/g' \
				-e 's/\$TEST\>/\${RSTRNT_TASKNAME}/g' -e 's/\${TEST}/\${RSTRNT_TASKNAME}/g' \
				-e 's/\$TESTPATH/\${RSTRNT_TASKPATH}/g' -e 's/\${TESTPATH}/\${RSTRNT_TASKPATH}/g' \
				-e 's/\$VARIANT/\${RSTRNT_OSVARIANT}/g' -e 's/\${VARIANT}/\${RSTRNT_OSVARIANT}/g' -i runtest.sh
			git add runtest.sh
		fi
		rm -rf $metafile
	fi

	subtests_generator="gen_subtest.sh"
	[ -x $subtests_generator ] && sh $subtests_generator

	if [[ -f "$subtestf" ]]; then
		if grep -E -q '^- \{?(attr|param|setup):' "$subtestf"; then
			subtests_yml=$(yq '.[] style="flow"|... comments=""' "$subtestf")
		else
			subtests_yml=$(sed -nr '/^[[:space:]]*(attr|param|setup):/ {s/(}|]) +#.*$/\1/; s/^/- \{/; s/$/\}/; p}' "$subtestf")
		fi
	fi

	local _maxtime=${Attr[time]%m}
	if [[ "$FORMAT" = raw ]] || [[ -z "$subtests_yml" ]]; then
		_attr=$(echo -n "attr: {"; for e in "${!Attr[@]}"; do ymlhash "$e" "${Attr[$e]}"; done; echo -n "}")
		_attr=${_attr//, \}/\}}
		[[ ${#Setup[@]} > 0 ]] && {
			_setup=", "$(echo -n "setup: ["; for e in "${Setup[@]}"; do ymllist "$e"; done; echo -n "]")
			_setup=${_setup/, ]/]}
		}
		if [[ ${_maxtime} -lt 5 ]]; then
			_param=", param: [KILLTIMEOVERRIDE=$(((_maxtime+5)*60))]"
		fi
		echo "- ${taskname}: {${_attr}${_setup}${_param}}"
	else
		while read l; do
			[[ -z "$l" ]] && continue

			#update attr
			for key in "${!Attr[@]}"; do
				oval=${Attr[$key]}
				val=$(yq ".[0].attr.$key" <<<"$l")
				if [[ $val = null ]]; then
					l=$(yq ".[0].attr.$key=\"${oval}\"" <<<"$l")
				fi
			done

			#update param
			if [[ ${_maxtime} -lt 5 ]]; then
				local paramCnt
				local _paramList=($(yq ".[0].param.[]" <<<"$l"))
				paramCnt=${#_paramList[@]}
				l=$(yq ".[0].param.[$paramCnt]=\"KILLTIMEOVERRIDE=$(((_maxtime+5)*60))\"" <<<"$l")
			fi

			#get the setup list
			if [[ ${#Setup[@]} -gt 0 ]]; then
				local i j setupcnt okey
				local setuplist=$(yq ".[0].setup.[]" <<<"$l")
				setupcnt=$(wc -l <<<"$setuplist")
				[[ -z "$setuplist" ]] && { setupcnt=0; }
				if [[ $setupcnt -eq 0 ]]; then
					for i in ${!Setup[@]}; do
						l=$(yq ".[0].setup.[$i]=\"${Setup[$i]}\"" <<<"$l")
					done
				else
					let j=setupcnt
					for i in ${!Setup[@]}; do
						okey=${Setup[$i]%%[= ]*}
						if ! grep -q -- "$okey" <<<"$setuplist"; then
							l=$(yq ".[0].setup.[$j]=\"${Setup[$i]}\"" <<<"$l")
							let j++
						fi
					done
				fi
			fi
			#l=$(yq "sort_keys(.[])" <<<"$l")
			l=$(yq "sort_keys(.[])|sort_keys(.[].attr)" <<<"$l")

			echo "${l/-/- ${taskname}:}"
		done <<<"$subtests_yml"
	fi

	popd >/dev/null
}

_getTestList() {
	local paths= info=
	local d= _d= _subtestf=

	paths=$(find "$@" \( -name runtest.sh -o -name _test_case_link \) |
		sed -r -e 's;^.//*;;' -e 's;/(runtest.sh|_test_case_link)$;;' -e 's/^(runtest.sh|_test_case_link)$/./')
	for _d in $paths; do
		_subtestf=
		d=$_d
		if [ -L $_d/_test_case_link ]; then
			_subtestf=$(readlink -f $_d/subtest.yml)
			d=$(readlink -f $_d/_test_case_link/)
		fi
		[[ ! -f ${d}/Makefile && ! -f ${d}/metadata ]] && continue

		info=$(_caseInfo ${d} $_subtestf)
		[ -z "$info" ] && continue

		echo "$info"
	done
}

# __main__
#===============================================================================
export LANG=C
P=${0##*/}
FORMAT=std
#-------------------------------------------------------------------------------
Usage() {
	echo "Usage: $P [--raw | -e[expand_file] | -t <maxtime>] [--metaf] [\$dir ...]"
}
_at=`getopt -o hdrt:e:: \
	--long help \
	--long raw \
	--long fmt: \
	--long conv \
	--long metaf \
    -a -n "$P" -- "$@"`
eval set -- "$_at"

while true; do
	case "$1" in
	-h|--help)      Usage; shift 1; exit 0;;
	-r|--raw)       FORMAT=raw; shift 1;;
	--fmt)          FORMAT=$2; shift 2;;
	-d)		DEBUG=yes; shift 1;;
	-t)		maxtime=${2}; shift 2;;
	-e)		E=yes; setupConf=$2; shift 2;;
	--conv)		CONV=yes; shift 1;;
	--meta*)	META=yes; FORMAT=raw; shift 1;;
	--) shift; break;;
	esac
done

if [[ $E != yes ]]; then
	_getTestList "$@"

else
	testList=$(_getTestList "$@")
	testListWithSetup=$(echo "$testList"|grep 'setup: \[')
	testListWithOutSetup=$(echo "$testList"|grep -v 'setup: \[')

	[ -z "$setupConf" ] && {
		setupConf=/etc/bkr-client-improved/bkr.recipe.matrix.conf
		setupConfPrivate=~/.bkr-client-improved/bkr.recipe.matrix.conf
		[ -f $setupConfPrivate ] && setupConf=$setupConfPrivate
	}
	[ -r $setupConf ] || {
		echo "[Warn] can not read '$setupConf'" >&2
		exit 1
	}
	setupList=$(grep -E -v '^ *#|^$' $setupConf)
	setupyList=$(while read setup; do echo $(eval set -- $setup; for a; do ymllist "--$a"; done); done <<<"$setupList")

	while read setup; do
		setup=${setup//;/\\;}
		echo "$testListWithSetup" | sed "s;] *}$;, ${setup%,}&;"
		echo "$testListWithOutSetup" | sed "s;}$;, setup: [${setup%,}]&;"
	done <<<"$setupyList"
fi
