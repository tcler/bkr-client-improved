#!/bin/sh
# -*- tcl -*-
# The next line is executed by /bin/sh, but not tcl \
exec tclsh "$0" ${1+"$@"}

# Author: jiyin@redhat.com
# Like but better than "bkr workflow-xxx --dryrun", more functional and flexible
# gen_job_xml --help for detail

lappend ::auto_path $::env(HOME)/lib /usr/local/lib /usr/lib64 /usr/lib
package require xmlgen
package require getOpt 3.0
package require runtestlib
namespace import ::xmlgen::* ::getOpt::* ::runtestlib::*

declaretags job whiteboard notify cc
declaretags recipeSet recipe and or not
declaretags distroRequires distro_name distro_family distro_tag distro_variant distro_method distro_arch
declaretags hostRequires hostname arch system_type key_value
declaretags repos repo
declaretags partitions partition
declaretags ks_appends ks_append
declaretags watchdog
declaretags task params param

source $::runtestConf

# global var
array set Opt {}
array set InvalidOpt {}
set NotOptions [list]
set OptionList {
  "  Options:" {
	{help h}      {arg n	help {Print this usage}}
	F             {arg m	help {Specify a test list file}}
	opts-macro    {arg y	help {exec the "cmd [arg]" in run time to generate options} hide y}
  }

  "\n  Options for job configuration:" {
	restraint		{arg o	help {Use restraint harness instead of beach}}
	cc			{arg m	help {Notify additional e-mail address on job completion}}
	job-owner		{arg y	help {Submit job on behalf of USERNAME (submitting user must be a submission delegate for job owner)}}
	{wb whiteboard}		{arg y	help {Set the whiteboard for this job}}
	repo			{arg m	help {Configure repo at <URL> in the kickstart for installation}}
	repo-post		{arg m	help {Configure repo at <URL> as part of kickstart %post execution}}
	recipe			{arg n	help {Just generate recipeSet node, internal use for runtest -merge}}
	rwb			{arg y	help {Set the whiteboard for the recipe}}
	retention-tag           {arg y  help {e.g: scratch, 60days, 120days, active, active+1, audit}}
	product                 {arg y  help {e.g: cpe:/o:redhat:enterprise_linux:$x:$y}}
  }

  "\n  Options for selecting distro tree(s):" {
	family			{arg m	help {Use latest distro of this FAMILY for job, eg. "RedHatEnterpriseLinux6"}}
	tag			{arg m	help {Use latest distro tagged with TAG, eg. "RTT_ACCEPTED" (default: STABLE)}}
	distro			{arg y	help {Use named distro for job)}}
	variant			{arg m	help {Specify the distro variant}}
	arch			{arg y	help {Specify the distro arch}}
	{dr distrorequire}	{arg m	help {distrorequire -dr=key="value"}}
  }

  "\n  Options for selecting system(s):" {
	{servers s}		{arg y	help {Include NUMBER server hosts for multi-host test}}
	{clients c}		{arg y	help {Include NUMBER client hosts for multi-host test}}
	{hr hostrequire}	{arg m	help {Additional <hostRequires/> for job, example: --hostrequire=labcontroller="lab.example.com"}}
	{kv keyvalue}		{arg m	help {Require system with matching legacy key-value, example: --keyvalue=NETWORK=e1000}}
	machine			{arg m	help {Require the machine for job, set comma-separated values for multi-host, example: --machine=SERVER1,CLIENT1}}
	systype			{arg m	help {Require system of TYPE for job (Machine, Prototype, Laptop, ..) default: Machine}}
	ormachine		{arg m	help {Use comma-separated values to set a machine pool, example: --ormachine=HOST1,HOST2,HOST3}}
	random                  {arg n  help {autopick type}}
	hrxml                   {arg y  help {add raw filter in hostrequire node, example: --hrxml='<system><not><fqdn op="like" value="%rmda%" /></not></system>'}}
  }

  "\n  Options for selecting special system(s) of networ-qe:" {
	nay-driver		{link netqe-nic-driver	hide y}
	nic-num			{link netqe-nic-num	hide y}
	nay-nic-driver		{link netqe-nic-driver	hide y}
	nay-nic-num		{link netqe-nic-num	hide y}
	nay-nic-model		{link netqe-nic-model	hide y}
	nay-nic-speed		{link netqe-nic-speed	hide y}
	nay-nic-match		{link netqe-nic-match	hide y}
	nay-nic-unmatch		{link netqe-nic-unmatch hide y}
	netqe-nic-driver	{arg o help ""}
	netqe-nic-num		{arg o help ""}
	netqe-nic-model		{arg o help ""}
	netqe-nic-speed		{arg o help ""}
	netqe-nic-match		{arg o help ""}
	netqe-nic-unmatch	{arg o help {These options together generate the machine pool which match required NIC num/driver/model/speed
				- Refer `parse_netqe_nic_info.sh -h`, which is the engine for the translating.
				  Example: --netqe-nic-driver=e1000e --netqe-nic-num=2
				- Use comma-separated values for different machine pool of multihost
				  Example: --netqe-nic-driver=e1000e,any --netqe-nic-num=2 --netqe-nic-speed=1g }}
  }

  "\n  Options for setting tasks:" {
	task			{arg m	help {Include named task in job, can use multiple times}}
	taskn			{arg y	help {repeat task 'N' times}}
	{param taskparam}	{arg m	help {Set task params, can use multiple times.
				Use "mh-" prefix to set different value for multihost, example: --param=mh-key=val1,val2}}
	nvr			{arg m	help {Specify the kernel(Name-Version-Release) to be installed}}
	install			{arg m	help {Install PACKAGE using /distribution/pkginstall, can use multiple times}}
	upstream		{arg o	help {Specify the kernel src git addr to be installed. --upstream=[git://a.b.c/d][#tag]
				default: git://git.app.eng.bos.redhat.com/linux.git#master}}
	upstream-kernel-kasan   {arg n  help {Flag to enable upstream kernel kasan support}}
	Scratch			{arg m  help {Install scratch built package using /distribution/scratchinstall, can use multiple times}}
	scratch			{arg m  help {same as Scratch, but every specified just apply one host, if in multihost mode}}
	dbgk			{arg n	help {Use the debug kernel}}
	kcov			{arg o	help {Enable kcov for coverage data collection, use arg to specify KDIR, example: --kcov="fs, drivers/net"}}
	kdump			{arg o	help {Enable kdump using /kernel/kdump/setup-nfsdump}}
	cmd			{arg m	help {Add /distribution/command before test task}}
	cmdb			{arg m	help {Add /distribution/command before install kernel}}
	cmd-end			{arg m	help {Add /distribution/command in the end of the recipe}}
	leap-second		{arg n	help {Add leap-second task}}
	reserve-if-fail		{arg o	help {Reserve the machine if test fail, specify RESERVETIME with s/m/h/d unit, max amount is 99h}}
	reserve			{arg o	help {Reserve system at the end of the recipe}}
	fips                    {arg o  help {enable fips}}
	abrt                    {arg n  help {enable abrt(insert /distribution/crashes/enable-abrt)}}
  }

  "\n  Options for installation:" {
	{part partition}	{arg m	help {Additional <partitions/> for job, example: --part='fs=xfs name=/mnt/xfs size=10 type=part'}}
	ks-meta			{arg m  help {Pass kickstart metadata OPTIONS when generating kickstart}}
	ks-append		{arg m	help {Specify additional kickstart commands to add to the base kickstart file}}
	ks			{link ks-append hide y}
	ksf			{arg m	help {Similar to --ks-append, but pass the content of a specified file}}
	{k-opts kernel-options}	{arg m	help {Pass OPTIONS to kernel during installation}}
	{k-opts-post kernel-options-post}	{arg m	help {Pass OPTIONS to kernel after installation}}
  }
}

proc Usage {} {
	puts "Usage: $::argv0 --distro=<DISTRO> \[options\]"
	puts "Generates a Beaker job XML file, like `bkr workflow-simple`, but have many improvements and unofficial options"
	puts "Example:  gen_job_xml --distro RHEL-6.6 --task=/distribution/reservesys --arch=x86_64"
	puts "Example:  gen_job_xml --family RedHatEnterpriseLinux7 -F test.list --nvr=kernel-x.y.z-abc.el7 --dbgk\n"
	getUsage $::OptionList
}

proc getDefaultNVR {_distro} {
	set reg $_distro
	if [regexp {^RHEL-[0-9]\.[0-9]$} $reg] {
		regsub {RHEL-([0-9]+\.[0-9]+)} $reg {RHEL-./\1} reg
	}

	set _NVR [exec vershow {^kernel-[2-6]+[-.0-9]+\.} $reg]
	if [regsub {.*(kernel-[2-6]+[-.0-9]+\.[^.]+).*} $_NVR {\1} _defaultNVR] {
		return $_defaultNVR
	} else {
		return {}
	}
}

# _parse_ argument
getOptions $OptionList $::argv Opt InvalidOpt NotOptions
proc debug {} {
	puts "NotOptions: $NotOptions"
	parray InvalidOpt
	parray Opt
}

if [info exist Opt(help)] {
	Usage
	exit 0
}

# process --param= option
set GlobalParam {}
if [info exist Opt(param)] { lappend GlobalParam {*}$Opt(param) }

# process --distro= option
set DISTRO_L {}
set FAMILY_L {}
set TAG_L {}
set _ldistro {}
set _lfamily {}
set _ltag {STABLE}
if [info exist Opt(distro)] {
	foreach e $Opt(distro) {lappend _ldistro {*}[split $e ", "]}
	set prev {}
	foreach d $_ldistro {
		if [regexp -- {^[0-9]} $d] {
			set d [expandDistro $d]
		}
		if {[string length $d] > 0} {
			lappend DISTRO_L $d
			set prev $d
		} elseif {[string length $prev] > 0} {
			lappend DISTRO_L $prev
		}
	}
	lappend GlobalParam "DISTRO_BUILD=$DISTRO_L"
}
if [info exist Opt(family)] {
	foreach e $Opt(family) {lappend _lfamily {*}[split $e ", "]}
	set prev {}
	foreach family $_lfamily {
		if {[string length $family] > 0} {
			lappend FAMILY_L $family
			set prev $family
		} elseif {[string length $prev] > 0} {
			lappend FAMILY_L $prev
		}
	}
}
if [info exist Opt(tag)] {
	foreach e $Opt(tag) {lappend _ltag {*}[split $e ", "]}
	set prev {}
	foreach t $_ltag {
		if {[string length $t] > 0} {
			lappend TAG_L $t
			set prev $t
		} elseif {[string length $prev] > 0} {
			lappend TAG_L $prev
		}
	}
}

if [info exist Opt(upstream)] {
	set upstreamUrl git://git.app.eng.bos.redhat.com/linux.git
	set upstreamTag master
	if {$Opt(upstream) != ""} {
		set url [regsub {#.*} $Opt(upstream) {}]
		set tag [regsub {[^#]*(#|$)} $Opt(upstream) {}]
		if {[string trim $url] != ""} {set upstreamUrl $url}
		if {[string trim $tag] != ""} {set upstreamTag $tag}
	}
}

if {[llength $DISTRO_L] == 0 && [llength $FAMILY_L] == 0} {
	puts stderr "Warning: no distro specified, use --distro= or --family= option"
	Usage
	exit 1
}

# process -F or --task= option
set TaskList {}
set TestList {}
if [info exist Opt(task)] { lappend TestList {*}$Opt(task) }
if [info exist Opt(F)] {
	foreach testfile $Opt(F) {
		set fp stdin
		if {$testfile ni "-"} {
			set fp [open $testfile]
		}

		while {-1 != [gets $fp line]} {
			lappend TestList $line
		}

		if {$testfile ni "-"} { close $fp }
	}
}
if {[llength $TestList] == 0} {
	puts stderr "Warning: no task specified, use -F or --task= option"
	Usage
	exit 1
}
foreach T $TestList {
	lappend TaskList [concat [lindex $T 0] $GlobalParam [testinfo param $T]]
}

set METHOD "nfs"

set SystemTypeList {}
if [info exist Opt(systype)] {
	foreach e $Opt(systype) {lappend SystemTypeList {*}[split $e ", "]}
}

set VARIANT_L {}
if [info exist Opt(variant)] {
	foreach e $Opt(variant) {lappend VARIANT_L {*}[split $e ", "]}
}

set KVARIANT "up"
if [info exist Opt(dbgk)] { set KVARIANT "debug" }

set MACHINE_L {}
if [info exist Opt(machine)] {
	foreach e $Opt(machine) {lappend MACHINE_L {*}[split $e ", "]}
}

set NVR_L {}
if [info exist Opt(nvr)] {
	foreach e $Opt(nvr) {lappend NVR_L {*}[split $e ", "]}
}

set ORMACHINE_L {}
if [info exist Opt(ormachine)] {
	foreach e $Opt(ormachine) {lappend ORMACHINE_L {*}[split $e ", "]}
}

set ARCH_L {auto}
if [info exist Opt(arch)] {
	set ARCH_L {}
	foreach e $Opt(arch) {lappend ARCH_L {*}[split $e ", "]}
}

set FIPS_L {}
if [info exist Opt(fips)] {
	foreach e $Opt(fips) {lappend FIPS_L {*}[split $e ", "]}
}

set recipe_ks_meta {}
if [info exist Opt(ks-meta)] { set recipe_ks_meta $Opt(ks-meta) }

set restraint {}
set restraint_git "git://pkgs.devel.redhat.com/tests"
if [info exist Opt(restraint)] {
	set restraint "yes"
	lappend recipe_ks_meta harness='restraint-rhts beakerlib'
	if {$Opt(restraint) != ""} {
		if [regexp {^\?} $Opt(restraint)] {
			append restraint_git $Opt(restraint)
		} else {
			set restraint_git $Opt(restraint)
		}
	}
}

set ROLE_LIST {}
if [info exist Opt(servers)] { lappend ROLE_LIST {*}[lrepeat $Opt(servers) SERVERS] }
if [info exist Opt(clients)] { lappend ROLE_LIST {*}[lrepeat $Opt(clients) CLIENTS] }
if {[llength $ROLE_LIST] == 0} { set ROLE_LIST STANDALONE }

# handle network-qe private NIC machines
set netqe_nic_opts {driver model speed match unmatch num}
foreach i $netqe_nic_opts {
	if [info exist Opt(netqe-nic-$i)] {
		set NETQE_NIC_OPTS_DICT($i) [split $Opt(netqe-nic-$i) ", "]
	}
}

set M 0
foreach role $ROLE_LIST {
	# set netqe-nic machine list for different role
	if [info exist NETQE_NIC_OPTS_DICT] {
		# init each params for parse_netqe_nic_info.sh
		foreach i $netqe_nic_opts { set $i {} }

		# get netqe-nic-* options key-val for each role
		foreach key [array names NETQE_NIC_OPTS_DICT] {
			set $key [lindex $NETQE_NIC_OPTS_DICT($key) $M]
			eval set val $$key
			if {$val==""} {set $key [lindex $NETQE_NIC_OPTS_DICT($key) 0]}
		}

		# set default values for parse_netqe_nic_info.sh params
		if {$driver==""} {set driver any}
		if {$model==""} {set model any}
		if {$speed==""} {set speed any}
		if {$match==""} {set match any}
		if {$unmatch ==""} {set unmatch ''}
		if {$num==""} {set num 1}

		# get ormachine_list for each role
		set NETQE_NIC_MACHINE($role) [exec parse_netqe_nic_info.sh -d "$driver" -m "$model" -s "$speed" -p "$match" -v "$unmatch" -c "$num"]
		incr M 1
	} {
		set NETQE_NIC_MACHINE($role) {}
	}
}

set jobCtl {!}
set wbCtl {-}
set notifyCtl {!}
if [info exist Opt(recipe)] {
	set jobCtl {c}
	set wbCtl {_}
	set notifyCtl {C}
}

if ![info exist jobOwner] {
	set jobOwner {}
}
if [info exist Opt(job-owner)] {
	set jobOwner $Opt(job-owner)
}

set taskN 1
if [info exist Opt(taskn)] {
	set taskN $Opt(taskn)
}

set retentionTag "60days"
set productkv {}
if [info exist Opt(retention-tag)] {
	set retentionTag $Opt(retention-tag)
	if [info exist Opt(product)] {
		set productkv product=$Opt(product)
	}
}

# start generate xml
job retention_tag=$retentionTag $productkv user=$jobOwner $jobCtl {
	if ![info exist Opt(wb)] {
		set Time [clock format [clock seconds] -format %Y-%m-%d~%H:%M]
		set Opt(wb) "\[$Time\] $DISTRO_L \\[llength $TaskList]/[file tail [lindex [lindex $TaskList 0] 0]],... arch=$ARCH_L "
	}
	whiteboard $wbCtl $Opt(wb)
	notify $notifyCtl {
		if [info exist Opt(cc)] {
			foreach e $Opt(cc) {
				foreach m [split $e ", "] { cc - $m }
			}
		}
	}
	recipeSet priority=Normal ! {
		set SystemType "Machine"
		set VARIANT {}
		set DISTRO {}
		set FAMILY {}
		set TAG {STABLE}
		set R {0};	# Role index
		foreach role ${ROLE_LIST} {
			if [llength $DISTRO_L] {
				set DISTRO [lindex $DISTRO_L 0]
				set DISTRO_L [lrange $DISTRO_L 1 end]
			}
			if [llength $FAMILY_L] {
				set FAMILY [lindex $FAMILY_L 0]
				set FAMILY_L [lrange $FAMILY_L 1 end]
			}
			if [llength $TAG_L] {
				set TAG [lindex $TAG_L 0]
				set TAG_L [lrange $TAG_L 1 end]
			}
			if [llength $ARCH_L] {
				set ARCH [lindex $ARCH_L 0]
				set ARCH_L [lrange $ARCH_L 1 end]
			}
			lassign [split $ARCH .] ARCH Vendor
			if ![string length $ARCH] {set ARCH auto}
			if [string equal $ARCH "auto"] {set ARCH x86_64}

			if ![info exist Opt(k-opts)] {set Opt(k-opts) ""}
			if ![info exist Opt(k-opts-post)] {set Opt(k-opts-post) ""}
			recipe kernel_options=$Opt(k-opts) kernel_options_post=$Opt(k-opts-post) whiteboard=$Opt(wb) ks_meta=$recipe_ks_meta ! {
				set pick "false"
				if [info exist Opt(random)] {set pick "true"}
				doTag autopick random $pick -
				distroRequires ! {
					and ! {
						if {$DISTRO ni {"" "family"}} {
							if ![regexp -- {^RedHatEnterpriseLinux} $DISTRO] {
								distro_name op== value=${DISTRO} -
							} else {
								distro_family op== value=${DISTRO} -
								distro_tag op== value=${TAG} -
							}
						} else {
							distro_family op== value=${FAMILY} -
							distro_tag op== value=${TAG} -
						}

						if [llength $VARIANT_L] {
							set VARIANT [lindex $VARIANT_L 0]
							set VARIANT_L [lrange $VARIANT_L 1 end]
						}
						if {$VARIANT ni ""} {
							distro_variant op== value=$VARIANT -
						}
						distro_method op== value=${METHOD} -
						distro_arch op== value=${ARCH} -
						if [info exist Opt(dr)] {
							foreach kv $Opt(dr) {
								lassign [regsub (.*?)(=|!=|>|>=|<|<=)(.*$) $kv {\1 op=\2 {value=\3}}] k op v
								doTag $k $op $v -
							}
						}
						if [info exist Opt(hrxml)] {
							puts $Opt(hrxml)
						}
					}
				}
				hostRequires ! {
					if [llength $SystemTypeList] {
						set SystemType [lindex $SystemTypeList 0]
						set SystemTypeList [lrange $SystemTypeList 1 end]
					}

					and ! {
						set MACHINE {}
						if [llength $MACHINE_L] {
							set MACHINE [lindex $MACHINE_L 0]
							set MACHINE_L [lrange $MACHINE_L 1 end]
						}

						if {[string length $MACHINE] > 0} {
							hostname op=like value=$MACHINE -
						} else {
							arch op== value=${ARCH} -
							if [info exist Opt(hr)] {
								foreach kv $Opt(hr) {
									lassign [regsub (.*?)(=|!=|>|>=|<|<=)(.*$) $kv {\1 op=\2 {value=\3}}] k op v
									doTag $k $op $v -
								}
							}
							if {$Vendor != ""} {
								doTag key_value key=CPUVENDOR op== value=$Vendor -
							}
							if [info exist Opt(kv)] {
								foreach kv $Opt(kv) {
									lassign [regsub (.*?)(=|!=|>|>=|<|<=)(.*$) $kv {key=\1 op=\2 {value=\3}}] k op v vv
									doTag key_value $k $op $v -
								}
							}
						}
					}
					system_type op== value=${SystemType} -
					or ! {
						foreach m "$ORMACHINE_L $NETQE_NIC_MACHINE($role)" {
							hostname op=like value=$m -
						}
					}
					not ! {
						#
					}
				}
				repos ! {
					if [info exist Opt(repo)] {
						set i 0
						foreach url $Opt(repo) {
							repo name=myrepo_[incr i] url=$url -
						}
					}
					if {$restraint == "yes"} {
						repo name=restraint url=http://file.bos.redhat.com/~bpeck/restraint/el7--test/ -
					}
				}
				partitions ! {
					if [info exist Opt(part)] {
						foreach part $Opt(part) {
							partition {*}$part -
						}
					}
				}

				ks_appends ! {
					if [info exist Opt(repo-post)] {
						ks_append ! {
							puts {<![CDATA[}
							puts {%post}
							set i 0
							foreach url $Opt(repo-post) {
								puts "cat <<-EOF >/etc/yum.repos.d/beaker-kernel$i.repo
								\[beaker-kernel$i\]
								name=beaker-kernel$i
								baseurl=$url
								enabled=1
								gpgcheck=0
								skip_if_unavailable=1
								EOF"
								incr i
							}
							puts {%end}
							puts -nonewline {]]>}
						}
					}

					if [info exist Opt(ksf)] {
						if {![catch {set fp [open $Opt(ksf)]} err]} {
							set data [read $fp]
							close $fp
							lappend Opt(ks-append) $data
						}
					}
					if [info exist Opt(ks-append)] {
						foreach ks $Opt(ks-append) {
							ks_append ! {
								puts {<![CDATA[}
								puts {%post}
								puts $ks
								puts {%end}
								puts -nonewline {]]>}
							}
						}
					}
				}

				if [info exist Opt(reserve-if-fail)] {watchdog panic=ignore -}

				# distro install
				task name=/distribution/install role=$role ! {
					params ! {
						param name=DISTRO_BUILD value=$DISTRO -
					}
				}

				# command before kernelinstall
				if [info exist Opt(cmdb)] {
					foreach cmd $Opt(cmdb) {
						task name=/distribution/command role=$role ! {
							params ! {
								param name=CMDS_TO_RUN value=$cmd -
							}
						}
					}
				}

				# kernelinstall
				if ![info exist NVR] { set NVR {} }
				if [llength $NVR_L] {
					set NVR [lindex $NVR_L 0]
					set NVR_L [lrange $NVR_L 1 end]
				}
				if {$KVARIANT == "debug" && $NVR == ""} {
					set NVR [getDefaultNVR $DISTRO]
				}

				set UP ""
				if {$NVR ni {"" "{}"}} {
					if ![regexp {^upstream.*} $NVR] {
						set defaultNVR [getDefaultNVR $DISTRO]
						if {$NVR != $defaultNVR || $KVARIANT == "debug"} {
							task name=/distribution/kernelinstall role=$role ! {
								params ! {
									set KN [regsub {((^[a-z][a-z-]*)-)?.*} $NVR {\2}]
									if {$KN == ""} {set KN kernel}
									set KVR [regsub {^[a-z-]*} $NVR {}]
									param name=KERNELARGNAME value=$KN -
									param name=KERNELARGVERSION value=$KVR -
									param name=KERNELARGVARIANT value=$KVARIANT -
									param name=NoDeps value=--nodeps -
								}
							}
						}
					} else {
						set UP [regsub {^upstream} $NVR {}]
						set UP [regsub {^[:=]} $UP {}]
						set upstreamUrl git://git.app.eng.bos.redhat.com/linux.git
						set upstreamTag master
						if {$UP != ""} {
							set url [regsub {#.*} $UP {}]
							set tag [regsub {[^#]*(#|$)} $UP {}]
							if {[string trim $url] != ""} {set upstreamUrl $url}
							if {[string trim $tag] != ""} {set upstreamTag $tag}
						}
						set UP 1
					}
				}
				if {[info exist Opt(upstream)] || $UP != ""} {
					task name=/kernel/distribution/upstream-kernel/install role=$role ! {
						params ! {
							param name=KERNEL_GIT_REPO value=$upstreamUrl -
							param name=KERNEL_GIT_COMMIT value=$upstreamTag -
							param name=ABORT_IF_FAIL value=1 -
							if [info exist Opt(upstream-kernel-kasan)] {
								param name=ENABLE_KASAN value=1 -
							}
						}
					}
				}
				if [info exist Opt(Scratch)] {
					foreach bid $Opt(Scratch) {
						task name=/distribution/scratch-build-install role=$role ! {
							params ! {
								param name=BUILDID value=$bid -
							}
						}
					}
				}
				if [info exist Opt(scratch)] {
					set scratch [lindex $Opt(scratch) 0]
					set Opt(scratch) [lrange $Opt(scratch) 1 end]
					foreach bid $scratch {
						task name=/distribution/scratch-build-install role=$role ! {
							params ! {
								param name=BUILDID value=$bid -
							}
						}
					}
				}

				# --kdump task
				if [info exist Opt(kdump)] {
					set kdumpAddr $Opt(kdump)
					if {$kdumpAddr == "" && [info exist KDUMP_ADDR]} {
						set kdumpAddr $KDUMP_ADDR
					}
					lassign [regsub (.*?):(/.*$) $kdumpAddr {\1 {\2}}] NFSSERVER VMCOREPATH
					if { [ string length $NFSSERVER ] == 0 } {
						set NFSSERVER "ibm-x3250m4-06.rhts.eng.pek2.redhat.com"
					}
					if { [ string length $VMCOREPATH ] == 0 } {
						set VMCOREPATH "/srv/nfs/vmcore"
					}
					task name=/kernel/kdump/setup-nfsdump role=$role ! {
						params ! {
							param name=NFSSERVER value=${NFSSERVER} -
							param name=VMCOREPATH value=${VMCOREPATH} -
							param name=NO_COMPRESS value=1
						}
					}
				}

				# enable fips
				if [info exist Opt(fips)] {
					set FIPS {1}
					if [llength $FIPS_L] {
						set FIPS [lindex $FIPS_L 0]
						set FIPS_L [lrange $FIPS_L 1 end]
					}
					if {$FIPS ni {"0"}} {
						task name=/distribution/fips/setup-fips-enabled role=$role ! {
							params -
						}
					} else {
						task name=/distribution/fips/setup-fips-disabled role=$role ! {
							params -
						}
					}
				}

				# enable abrt
				if [info exist Opt(abrt)] {
					task name=/distribution/crashes/enable-abrt role=$role -
				}

				# command after kernelinstall
				if [info exist Opt(cmd)] {
					foreach cmd $Opt(cmd) {
						task name=/distribution/command role=$role ! {
							params ! { param name=CMDS_TO_RUN value=$cmd - }
						}
					}
				}
				# pkg install
				if [info exist Opt(install)] {
					foreach pkg $Opt(install) {
						task name=/distribution/pkginstall role=$role ! {
							params ! { param name=PKGARGNAME value=$pkg - }
						}
					}
				}
				# --kcov task
				if [info exist Opt(kcov)] {
					if {$Opt(kcov) != ""} {
						set kdir $Opt(kcov)
					} else {
						set kdir "fs, net, drivers/net"
					}

					task name=/kernel/kcov/prepare role=$role ! {
						params ! {
							param name=MODE value=KA -
							param name=KDIR value=${kdir} -
						}
					}
					task name=/kernel/kcov/start role=$role ! {
						params -
					}
				}

				# --leap-second
				if [info exist Opt(leap-second)] {
					task name=/kernel/general/time/leap-second/ins_leap_sec role=$role ! {
						params -
					}
				}

				# task list
				for {set i 0} {$i < $taskN} {incr i} {
					foreach task ${TaskList} {
						set name [lindex $task 0]
						set arglist [lrange $task 1 end]
						task name=$name role=$role ! {
							if {$restraint == "yes"} {
								set head kernel
								if [regexp {^/CoreOS/} $name] {
									set head [lindex [split $name /] 2]
								}
								if [regexp "/$head/?\\??" $restraint_git] {
									set head {}
								}
								doTag fetch url=$restraint_git/$head#[string map "/CoreOS {} /$head/ {}" $name] -
							}
							params ! {
								foreach arg $arglist {
									lassign [regsub {(^[^=]*)=(.*)} $arg {\1 {\2}}] pname pvalue
									# use "mh-" prefix to set different value for multihost
									if [regexp {^mh-} $pname] {
										set pname [string range $pname 3 end]
										set pvalue_list [split $pvalue ,]
										param name=$pname value=[lindex $pvalue_list $R] -
									} else {
										param name=$pname value=$pvalue -
									}
								}
							}
						}
					}
				}

				# --kcov task
				if [info exist Opt(kcov)] {
					task name=/kernel/kcov/end role=$role ! {
						params ! {
							param name=KILLTIMEOVERRIDE value=345600
							param name=KILLTIMEOVERRIDE value=345600 -
						}
					}
					task name=/kernel/kcov/finalize role=$role ! {
						params -
						#params ! {
							#param name=NFS_SHARE value=$NFS_SHARE -
							#param name=TASKNAME value=$TASKNAME -
						#}
					}
				}
				# command in the end of the recipe
				if [info exist Opt(cmd-end)] {
					foreach cmd $Opt(cmd-end) {
						task name=/distribution/command role=$role ! {
							params ! {
								param name=CMDS_TO_RUN value=$cmd -
							}
						}
					}
				}
				# --reserve-if-fail
				if [info exist Opt(reserve-if-fail)] {
					set ReserveTime {356400}
					if {[string length $Opt(reserve-if-fail)] > 0} {
						set ReserveTime $Opt(reserve-if-fail)
					}

					set time {}
					task name=/distribution/reservesys role=$role ! {
						params ! {
							param name=RESERVE_IF_FAIL value=1 -
							param name=ESERVETIME value=${ReserveTime} -
						}

					}
				}
				# --reserve
				if [info exist Opt(reserve)] {
					set ReserveTime {356400}
					if {[string length $Opt(reserve)] > 0} {
						set ReserveTime $Opt(reserve)
					}

					set time {}
					task name=/distribution/reservesys role=$role ! {
						params ! {
							param name=ESERVETIME value=${ReserveTime} -
						}

					}
				}
			}
			set R [ expr $R + 1 ]
		}
	}
}
puts ""
