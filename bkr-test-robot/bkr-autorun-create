#!/bin/sh
# -*- tcl -*-
# The next line is executed by /bin/sh, but not tcl \
exec tclsh "$0" ${1+"$@"}

# Author: jiyin@redhat.com
# This is a test run creater.

lappend ::auto_path $::env(HOME)/lib /usr/local/lib /usr/lib64 /usr/lib
package require getOpt 3.0
package require runtestlib 1.1
package require tdom
package require sqlite3
package require md5
namespace import ::getOpt::* ::runtestlib::*

# global var
set prog [file tail $argv0]
array set Opt {}
array set InvalidOpt {}
set Args [list]
set ForwardOpt {}
set OptionList {
  "  Base options:" {
	{help h}      {arg n	help {Print this usage}}
	{pkg name}    {arg y	help {Package/Component name}}

	force   {arg n	help {Add new or overwrite existed testrun items}}
	update  {arg n	help {Just overwrite existed test run items}}
	d       {arg n	help {debug mode}}

	f       {arg n   help {just do dynamic filter and output test list}}
	alone   {forward y arg n	help {Submit all tests separately, one case one recipe}}
  }
}
source /usr/share/bkr-client-improved/common-options.tcl
lappend OptionList {*}[string map {"\{arg " "\{forward y arg "} $CommonOptionList]

proc Usage {progname {detail n}} {
	puts "Usage0: $progname <distro> <-|testfile...> <--pkg pkgname> \[gen_job_xml options\]"
	puts "Usage1: lstest <argument> | $progname <distro> <--pkg pkgname> \[gen_job_xml options\]"
	puts "Usage1: lstest <argument> | $progname <family> <--pkg pkgname> \[gen_job_xml options\]"
	puts ""
	if {$detail != "n"} {
		getUsage $::OptionList
	} else {
		puts "* try '$progname -h|less' to get more detail info about options"
	}
}
proc istty {{chann stdin}} {
	dict exists [fconfigure $chann] -mode
}

# _parse_ argument
getOptions $OptionList $::argv Opt InvalidOpt Args ForwardOpt
if [info exist Opt(d)] {
	puts "\[$prog\]: Arguments:{$Args}"
	puts "\[$prog\]: ForwardOpt{$ForwardOpt}"
	parray InvalidOpt
	parray Opt
}

if [info exist Opt(help)] {
	Usage $prog detail
	exit 0
}

if {[llength $Args] < 1} {
	Usage $prog
	exit 1
}

if ![info exist Opt(pkg)] {
	Usage $prog
	exit 1
}

# Get the package/component name
set pkgName $Opt(pkg)

# Get subcmd options
set SubcmdOpt $ForwardOpt
set TestArgList {}
set Idx [lsearch $Args {--}]
if {$Idx == -1} {
	set TestArgList [lrange $Args 1 end]
} else {
	set TestArgList [lrange $Args 1 [expr $Idx-1]]
	lappend SubcmdOpt {*}[lrange $Args [expr $Idx+1] end]
}

if [info exist Opt(d)] {
	puts "\[$prog\]: SubcmdOpt{$SubcmdOpt}"
}

# Get distro and gset info
set Distro [lindex $Args 0]
set Distro [expandDistro $Distro]   ;#If Distro is short format
set Gset {}
foreach e $SubcmdOpt {
	lappend Gset [regsub {^--} $e {-}]
}

if ![regexp -- {-nvr=} $Gset] {
	set nvr [exec bash -c "distro-compose -p ^kernel-\[0-9\] -d /$Distro$|sed -rn '2{p;q}'"]
	if {$nvr != ""} {
		set Gset [concat "-info=[regsub kernel- $nvr {}]" $Gset]
	}
}

set Distro_ [concat $Distro $Gset]
if {$Distro_ == ""} {
	puts "\[$prog\]: *WARN*: distro info is nil, something is wrong!"
	Usage $prog
	exit 1
}

if [regexp -- {family} $Distro] {
	lappend Gset "-info=[clock format [clock second] -format %Y-%m-%d]"
}

# Get the test list
set _TestList [list]
set TestList [list]
if {[llength $TestArgList]==0} {
	if [istty stdin] {
		puts "\[$prog\]: *Warn*: No test list resource specified!"
		Usage $prog
		exit 1
	} else {
		lappend TestArgList -
	}
}
foreach f $TestArgList {
	if {$f in "-"} {
		set fp stdin
		while {-1 != [gets $fp line]} {
			lappend _TestList $line
		}
	} elseif [file isfile $f] {
		if {![catch {set fp [open $f]} err]} {
			while {-1 != [gets $fp line]} {
				if { ! [regexp {^#} $line]} {
					lappend _TestList $line
				}
			}
		}
	}
}

# test filters
foreach test $_TestList {
	#filter: skip unexpected stuff
	set test [string trim $test]
	if {[regexp -- {^#} $test] == 1} continue
	if {$test == "" || $test == "./"} continue
	regsub -line {^-  *} $test {} test

	if {[exec yq {.[].attr.disable} << $test] ni {no 0 null}} continue

	#filter: check distro blacklist
	set blacklist [exec yq {.[].attr.distronotin} << $test]
	if {$blacklist != "null"} {
		set match_black 0
		foreach pattern {*}$blacklist {
			if [regexp $pattern [string map {family "RHEL-"} $Distro]] {
				set match_black 1
				break
			}
		}
		if {$match_black == 1} {
			puts stderr "{Filter} match blacklist {$blacklist}: $test"
			continue
		}
	}

	#filter: check distro whitelist
	set whitelist [exec yq {.[].attr.distroin} << $test]
	if {$whitelist != "null"} {
		set match_white 0
		foreach pattern {*}$whitelist {
			if [regexp $pattern [string map {family "RHEL-"} $Distro]] {
				set match_white 1
			}
		}
		if {$match_white == 0} {
			puts stderr "{Filter} not match whitelist {$whitelist}: $test"
			continue
		}
	}

	#filter: check arch blacklist and whitelist
	set _arch x86_64
	set _setup [split [exec yq {.[].setup.[]} << $test] "\n"]
	if {$_setup != "" || $SubcmdOpt != ""} {
		regexp {.*arch=([^ ]+)} "$_setup $SubcmdOpt" _ignore _arch
	}

	set blacklist {}
	set arch_blacklist [string map {"null" "" "\n" " "} [exec yq {.[].attr|(.archnotin,.noarch)} << $test]]
	if {[string trim $arch_blacklist] != ""} {set blacklist [list {*}$arch_blacklist]}
	if {$blacklist != ""} {
		set match_black 0
		foreach pattern {*}$blacklist {
			if [regexp $pattern $_arch] {
				set match_black 1
				break
			}
		}
		if {$match_black == 1} {
			puts stderr "{Filter} match blacklist {$blacklist}: $test"
			continue
		}
	}
	#filter: check arch whitelist and blacklist

	set whitelist {}
	set arch_whitelist [string map {"null" "" "\n" " "} [exec yq {.[].attr|(.archin,.arch)} << $test]]
	if {[string trim $arch_whitelist] != ""} {set whitelist [list {*}$arch_whitelist]}
	if {$whitelist != ""} {
		set match_white 0
		foreach pattern {*}$whitelist {
			if [regexp $pattern $_arch] {
				set match_white 1
			}
		}
		if {$match_white == 0} {
			puts stderr "{Filter} not match whitelist {$whitelist}: $test"
			continue
		}
	}

	lappend TestList $test
}
unset _TestList

if [info exist Opt(f)] {
	foreach test $TestList {puts $test}
	exit 0
}

if ![llength $TestList] {
	puts "\[$prog\]: *Warn*: test list is nil, nothing to do, please check your test list file."
	Usage $prog
	exit 1
}

# __main__
puts "\[$prog\]: Create/update run {$Distro_} ..."
# if dbroot dir not exist, create it.
file mkdir [dbroot]
cd [dbroot]
sqlite3 db testrun.db
db timeout 6000

#Create table testrun
db eval {CREATE TABLE if not exists testrun(testid,
	distro_rgset default '',
	jobid default '',
	testStat default '',
	abortedCnt default 0,
	rstat default '',
	res default '',
	taskuri default '',
	resdetail default '',
	comment default '',
	primary key(testid, distro_rgset) )}
#Create table testinfo
db eval {CREATE TABLE if not exists testinfo(testid primary key,
	test default '',
	tier default '1',
	pkgName default '' )}

#Backward compatibility: add column comment, tier
if {"tier" ni [db eval {PRAGMA table_info(testinfo)}]} {
	db eval {ALTER TABLE testinfo ADD tier default('')}
}
if {"comment" ni [db eval {PRAGMA table_info(testrun)}]} {
	db eval {ALTER TABLE testrun ADD comment default('')}
}

#Backward compatibility: rename column
if {"testplanName" in [db eval {PRAGMA table_info(testinfo)}]} {
	db eval {
		ALTER TABLE testinfo RENAME TO testinfo_old;
		CREATE TABLE testinfo(testid primary key, test default '', tier default '1', pkgName default '' );
		INSERT INTO testinfo(testid, test, pkgName)
			SELECT testid, test, tier, testplanName FROM testinfo_old;
		DROP TABLE testinfo_old
	}
}

# insert transaction
db transaction {
	foreach test $TestList {
		set tname [exec yq {keys|.[0]} << $test]
		set param [split [exec yq {.[].param.[]} << $test] "\n"]
		set setup [split [exec yq {.[].setup.[]} << $test] "\n"]

		set key "$tname $param $setup"
		set testid [::md5::md5 -hex [string trim $key]]

		# verify the arch
		regexp -- {-arch=([a-z0-9]+)} "$setup $SubcmdOpt" _ignore arch
		if {[info exist arch] && [regexp {RHEL-7} $Distro_] && [regexp {i386} $arch]} {
			continue
		}

		set tier [exec yq {.[].attr.level} << $test]
		if {$tier == "null"} {set tier tier1}

		set testInsert {INSERT OR REPLACE INTO testinfo (testid, test, tier, pkgName) VALUES($testid, $test, $tier, $pkgName)}
		db eval $testInsert

		if [info exist Opt(force)] {
			set testrunInsert {INSERT OR REPLACE INTO testrun (testid, distro_rgset, abortedCnt, res) VALUES($testid, $Distro_, 0, '-')}
		} elseif [info exist Opt(update)] {
			set testrunInsert {
				UPDATE OR IGNORE testrun
				set jobid='', testStat='', res='o', rstat='', taskuri='', abortedCnt=0, resdetail=''
				WHERE testid = $testid and distro_rgset = $Distro_
			}
		} else {
			set testrunInsert {INSERT OR IGNORE INTO testrun (testid, distro_rgset, abortedCnt, res) VALUES($testid, $Distro_, 0, '-')}
		}
		db eval $testrunInsert
	}
}

# create cron task for bkr-autorun-monitor
exec bash -c {
	crontab -l 2>/dev/null|grep -q "/usr/local/bin/bkr-autorun-monitor" || {
		(
		 echo "SHELL=/bin/bash"
		 echo "PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"
		 crontab -l|sed -r '/^(SHELL|PATH)=/d'
		 echo "05,35 *  *  *  *    /usr/local/bin/bkr-autorun-monitor &>/tmp/bkr-autorun-$USER.log;"
		) | crontab -
	}
	:
}

